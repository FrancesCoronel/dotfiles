var onRun = function(context) {
  var app            = NSApplication.sharedApplication();
  var sketch         = context.api()
  var doc            = context.document;
  var selectedLayers = context.selection;
  var selectedCount  = selectedLayers.count();
  var imageUrl       = '';
  var layer          = null;
  var layerSizes     = null;
  var apiKey         = 'AIzaSyBPSS1dILXvLs3Bp189PrCP7OMoD94RXmw';
  var zoomLevels     = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20'];
  var mapTypes       = ['roadmap', 'satellite', 'hybrid', 'terrain'];


  // Stop the program if nothing is selected
  if (selectedCount != 1) {
    app.displayDialog_withTitle("You have to select 1 shape layer.", "Wrong shape layer selection");

    return 0;
  }
  else {
    var layer = selectedLayers[0];

    // The plugin only supports Shape Layer objects.
    if ([layer class] != MSShapeGroup) {
      app.displayDialog_withTitle("Your selection was a “" + [layer name] + "”, that is not a shape layer. Please select a shape layer.", "Shape layer only");
    }
    else {
      var dialog = buildDialog();
      var settings = handleAlertResponse(dialog, dialog.runModal());

      if (settings != null) {
        if (settings.address.length() > 0) {
          layerSizes = layer.frame();

          imageUrl = "https://maps.googleapis.com/maps/api/staticmap?center=" + encodeURIComponent(settings.address) + "&zoom=" + settings.zoom + "&size=" + parseInt([layerSizes width]) + "x" + parseInt([layerSizes height]) + "&maptype=" + settings.type + "&scale=2" + settings.style + "&key=" + apiKey;

          fillLayerWithImage(imageUrl, layer);
        }
        else {
          app.displayDialog_withTitle('Please enter a valid address.', 'Error');

          dialog.runModal();
        }
      }
    }
  }

  /**
   * Build the dialog window
   * @return {COSAlertWindow}
   */
  function buildDialog() {
    var dialogWindow = COSAlertWindow.new();

    dialogWindow.setMessageText('Maps Generator');
    dialogWindow.setInformativeText('Write an address and choose a zoom option.');
    dialogWindow.addTextLabelWithValue('Enter an address or a place');
    dialogWindow.addTextFieldWithValue('');
    dialogWindow.addTextLabelWithValue(' ');
    dialogWindow.addTextLabelWithValue('Please choose a zoom level');
    dialogWindow.addTextLabelWithValue('(A higher value increases the zoom level)');

    var zoomSelect = createSelect(zoomLevels, 15);

    dialogWindow.addAccessoryView(zoomSelect);
    dialogWindow.addTextLabelWithValue(' ');
    dialogWindow.addTextLabelWithValue('You can choose a map type as well');

    var typeSelect = createSelect(mapTypes, 0);

    dialogWindow.addAccessoryView(typeSelect);
    dialogWindow.addTextLabelWithValue(' ');
    dialogWindow.addTextLabelWithValue('(Optional) Paste a Snazzy Maps style code');
    
    var styleField = NSTextField.alloc().initWithFrame(NSMakeRect(0,0,300,150));
    
    dialogWindow.addAccessoryView(styleField);
    dialogWindow.addTextLabelWithValue(' ');
    dialogWindow.addButtonWithTitle('OK');
    dialogWindow.addButtonWithTitle('Cancel');

    var addressTextBox = dialogWindow.viewAtIndex(1);
    var styleTextBox = dialogWindow.viewAtIndex(11);

    dialogWindow.alert().window().setInitialFirstResponder(addressTextBox);

    addressTextBox.setNextKeyView(zoomSelect);

    zoomSelect.setNextKeyView(typeSelect);

    typeSelect.setNextKeyView(styleTextBox);

    return dialogWindow;
  }

  /**
   * Create Select Box for a dialog window
   * @param  {Array}      options
   * @param  {Int}        selectedItemIndex
   * @return {NSComboBox}
   */
  function createSelect(options, selectedItemIndex) {
    selectedItemIndex = selectedItemIndex || 0;

    var select = NSComboBox.alloc().initWithFrame(NSMakeRect(0,0,100,25));

    select.addItemsWithObjectValues(options);
    select.selectItemAtIndex(selectedItemIndex);

    return select;
  }

  /**
   * Get the user input from the dialog window
   * @param  {COSAlertWindow} dialog
   * @param  {String}            responseCode
   * @return {Object}
   */
  function handleAlertResponse(dialog, responseCode) {
    if (responseCode == "1000") {
      return {
        address: dialog.viewAtIndex(1).stringValue(),
        zoom: dialog.viewAtIndex(5).stringValue(),
        type: dialog.viewAtIndex(8).stringValue(),
        style: parse(dialog.viewAtIndex(11).stringValue())
      };
    }

    return null;
  }

  /**
   * Fill a layer with a image data from Internet
   * @param  {String}       imageUrl
   * @param  {MSShapeGroup} layer
   */
  function fillLayerWithImage(imageUrl, layer) {
    var imageData = NSImage.alloc().initWithData(get(imageUrl));
    var fill = layer.style().fills().firstObject();

    fill.setFillType(4);
    fill.setImage(MSImageData.alloc().initWithImage_convertColorSpace(imageData, false));
    fill.setPatternFillType(1);

    doc.showMessage("Map generated!");
  }

  /**
   * Get data based on a url string
   * @param  {String}        url
   * @return {NSURLResponse}
   */
  function get(url) {
    var request = NSURLRequest.requestWithURL(NSURL.URLWithString(url));
    var response = NSURLConnection.sendSynchronousRequest_returningResponse_error(request, null, null);

    return response;
  }

  /**
   * Check if a item style is a color
   * @param  {String}  value 
   * @return {Boolean}       
   */
  function isColor(value) {
    return /^#[0-9a-f]{6}$/i.test(value.toString());
  }

  /**
   * Transform a color to a hex code color
   * @param  {String} value 
   * @return {String}       
   */
  function toColor(value) {
    return '0x' + value.slice(1);
  }

  /**
   * Transform a Snazzy Maps json object to a url string
   * Thanks to: http://jsfiddle.net/s6Dyp/ :)
   * @param  {String} jsonString 
   * @return {String}            
   */
  function parse(jsonString) {
    var json;
    var items = [];
    var separator = '%7C';
    var parameters = '';

    try {
      json = JSON.parse(jsonString);
    } catch (e) {
      doc.showMessage("The style cannot be applied :(");

      return '';
    }

    items.length = 0;

    for (var i = 0; i < json.length; i++) {
      var item = json[i];
      var hasFeature = item.hasOwnProperty('featureType');
      var hasElement = item.hasOwnProperty('elementType');
      var stylers = item.stylers;
      var target = '';
      var style = '';

      if (!hasFeature && !hasElement) {
        target = 'feature:all';
      } else {
        if (hasFeature) {
          target = 'feature:' + item.featureType;
        }
        if (hasElement) {
          target = (target) ? target + separator : '';
          target += 'element:' + item.elementType;
        }
      }

      for (var s = 0; s < stylers.length; s++) {
        var styleItem = stylers[s];
        var key = Object.keys(styleItem)[0];

        style = (style) ? style + separator : '';
        style += key + ':' + (isColor(styleItem[key]) ? toColor(styleItem[key]) : styleItem[key]);
      }

      items.push(target + separator + style);
    }

    return '&style=' + items.join('&style=');
  }
};
