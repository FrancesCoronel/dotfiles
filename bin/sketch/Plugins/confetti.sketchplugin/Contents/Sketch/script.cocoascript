var doc, selection, selectionCount, page, app, layer, layers, layerCount, utils, userDefaults;

//Input variables
var horizontalInput;
var verticalInput;
var opacityInput;
var rotationInput;
var randomSizeInput;

function initVars(context) {
  doc = context.document;
  page = doc.currentPage;
  selection = context.selection;


  app = [NSApplication sharedApplication];
  userDefaults = NSUserDefaults.alloc().initWithSuiteName("com.yummygum.sketch.confetti");

  // Utilities
  utils = {
  "createLabel": function(frame, text) {
    var label = NSTextField.alloc().initWithFrame(frame);
    label.setStringValue(text);
    label.setSelectable(false);
    label.setEditable(false);
    label.setBezeled(false);
    label.setDrawsBackground(false);
    return label
  },
  "getLayerProps": function() {
    var layer = selection.firstObject();

    if (layer) {
      var x = layer.frame().x();
      var y = layer.frame().y();
      return [x, y];
    } else {
      return [0, 0];
    }
  }
};

}

// Get current artboard
function getArtboard(context) {
  initVars(context);

  var currentArtboard = selection[0].parentArtboard;

  var layer = selection[0];
  var frame = [layer frame];
  var parent = [layer parentGroup];

  return parent;
}

//Check if user has made a selection. If not, show error
function checkSelection(context){
  initVars(context);

  log('----- SELECTION -------');

  selectionCount = selection.count();


  log('selectionCount: ' + selectionCount);

  if (selectionCount > 0) {
    // Has the user selected a complete artboard?
    for(var i=0; i < selectionCount; i++){
      var layerType = selection[i].className();
      if(layerType == "MSArtboardGroup"){
        // Display error message
        return false;
      }
    }
    return true;
  } else {
    //Nothing is selected
    return false;
  }

}

function saveDialogState(context){
  // The user entered some input in the dialog window and closed it.
  // We should save the preferences of the user so the user doesn't have to
  // re-enter them when running the plugin for a second time.

  // Save horizontal textfield
  horizontalInput = horizontalTextField.stringValue();
  [userDefaults setObject:horizontalInput forKey:"horizontalInput"]; // Save to user defaults

  // Save vertical textfield
  verticalInput = verticalTextField.stringValue();
  [userDefaults setObject:verticalInput forKey:"verticalInput"]; // Save to user defaults

  // Save opacity dropdown
  opacityInput = opacityCheckbox.stringValue();
  [userDefaults setObject:opacityInput forKey:"opacityInput"]; // Save to user defaults

  // Save rotation dropdown
  rotationInput = rotationCheckbox.stringValue();
  [userDefaults setObject:rotationInput forKey:"rotationInput"]; // Save to user defaults

  // Save random size dropdown
  randomSizeInput = randomSizeCheckbox.stringValue();
  [userDefaults setObject:randomSizeInput forKey:"randomSizeInput"]; // Save to user defaults

  // Save to user defaults
  userDefaults.synchronize(); // save

  log('⚙️ ------ START SAVED SETTINGS --------- ⚙️');
  log('horizontalInput: ' + horizontalInput);
  log('verticalInput: ' + verticalInput);
  log('opacityInput: ' + opacityInput);
  log('rotationInput: ' + rotationInput);
  log('randomSizeInput: ' + randomSizeInput);
  log('⚙️ ------ END SAVED SETTINGS --------- ⚙️');


}

// Get current selected shapes
function distributeShapes(context){
  initVars(context);

  //Check if the user has selected one or more shapes
  if(checkSelection(context) == false){
    // No shapes are selected
    [app displayDialog: "You need to select at least 1 layer to generate confetti. Remember you can also use Symbols!" withTitle:"Please select 1 or more layers"];
    return;
  };


  var artboard = getArtboard(context);
  var artboardWidth = artboard.frame().width();
  var artboardHeight = artboard.frame().height();


  if(getInputFromUser(context) == "1"){
    // The user clicked 'OK' in the dialog window
    // User input has been stored in variables
    // Proceed with distributing shapes

    var horizontal = horizontalInput;
    var vertical = verticalInput;

    var sectionWidth = artboardWidth / horizontal;
    var sectionHeight = artboardHeight / vertical;

    var source = selection;

    // Generate the confetti
    generateConfetti(context,horizontal,vertical,sectionWidth,sectionHeight);


  } else {

  }
}

function getInputFromUser(context){
  // Create and show dialog window

  var window = createRectangleWindow(context);
  var alert = window[0];

  var response = alert.runModal()

  if(response == "1000"){
    // This code only runs when the user clicks 'OK';


    // Fill variables with input from user

    saveDialogState(context);

    return true;
  } else {
    return false;
  }

}

function createRectangleWindow(context) {
  initVars(context);

  // Setup the window
  var alert = COSAlertWindow.new();
  alert.setMessageText("Configure your confetti")
  alert.addButtonWithTitle("Save and run");
  alert.addButtonWithTitle("Save");
  alert.addButtonWithTitle("Cancel");


  // Create the main view
  var viewWidth = 400;
  var viewHeight = 190;
  var viewSpacer = 10;
  var view = NSView.alloc().initWithFrame(NSMakeRect(0, 0, viewWidth, viewHeight));
  alert.addAccessoryView(view);


  // Labels
  var infoLabel = utils.createLabel(NSMakeRect(0, viewHeight - 33, (viewWidth - 100), 35),"Your confetti is distributed in a grid. Setup your grid to get the results you're looking for.");
  var horizontalLabel = utils.createLabel(NSMakeRect(-1, viewHeight - 65, (viewWidth / 2) - viewSpacer, 20), "Columns ↔");
  var verticalLabel = utils.createLabel(NSMakeRect(130 + viewSpacer, viewHeight - 65, (viewWidth / 2) - viewSpacer, 20), "Rows ↕");


  view.addSubview(infoLabel);
  view.addSubview(horizontalLabel);
  view.addSubview(verticalLabel);



  // Create inputs
  horizontalTextField = NSTextField.alloc().initWithFrame(NSMakeRect(0, viewHeight - 85, 130, 20));
  //slider = NSSlider.alloc().initwithFrame(NSMakeRect(20, viewHeight - 40, 130, 20));
  verticalTextField = NSTextField.alloc().initWithFrame(NSMakeRect(130 + viewSpacer, viewHeight - 85, 130, 20));
  opacityCheckbox = NSButton.alloc().initWithFrame(NSMakeRect(0, viewHeight - 125, viewWidth - viewSpacer, 20));
  randomSizeCheckbox = NSButton.alloc().initWithFrame(NSMakeRect(0, viewHeight - 150, (viewWidth / 2) - viewSpacer, 20));
  rotationCheckbox = NSButton.alloc().initWithFrame(NSMakeRect(0, viewHeight - 175, (viewWidth / 2) - viewSpacer, 20));

  // Make TAB key work to switch between textfields
  [horizontalTextField setNextKeyView:verticalTextField];

  // Configure checkboxes

  opacityCheckbox.setButtonType(NSSwitchButton);
  opacityCheckbox.setBezelStyle(0);
  opacityCheckbox.setTitle("Randomize opacity (70% - 100%)");
  opacityCheckbox.setState(getOpacityValue(context));


  rotationCheckbox.setButtonType(NSSwitchButton);
  rotationCheckbox.setBezelStyle(0);
  rotationCheckbox.setTitle("Randomize rotation");
  rotationCheckbox.setState(getRotationValue(context));


  randomSizeCheckbox.setButtonType(NSSwitchButton);
  randomSizeCheckbox.setBezelStyle(0);
  randomSizeCheckbox.setTitle("Randomize size");
  randomSizeCheckbox.setState(getRandomSizeValue(context));


  //Adding inputs to the dialog
  view.addSubview(horizontalTextField);
  view.addSubview(verticalTextField);
  view.addSubview(opacityCheckbox);
  view.addSubview(rotationCheckbox);
  view.addSubview(randomSizeCheckbox);
  //view.addSubview(slider);


  // Fill inputs
  var props = utils.getLayerProps();

  horizontalTextField.setStringValue(getHorizontalValue(context));
  verticalTextField.setStringValue(getVerticalValue(context));

  return [alert];
}

function generateConfetti(context, _horizontal, _vertical, _sectionWidth, _sectionHeight){

  initVars(context);

  //Check if the user has selected one or more shapes
  if(checkSelection(context) == false){
    log("❌ nothing selected ❌")
    // No shapes are selected
    [app displayDialog: "You need to select at least 1 layer to generate confetti. Remember you can also use Symbols!" withTitle:"Please select 1 or more layers"];
    return;
  };

  for (var h = 0; h < _horizontal; h++) {
      for (var v = 0; v < _vertical; v++) {
          var randomElement = Math.floor(Math.random() * selectionCount);
          log('Selection: ' + selection);
          log('randomElement: ' + randomElement);
          log('selectionCount: ' + selectionCount);

          var element = selection[randomElement];
          var clone = [element duplicate];
          var frame2 = [clone frame];

          var width = clone.frame().width()
          var height = clone.frame().height()

          var xPos = (h * _sectionWidth);
          var yPos = (v * _sectionHeight);

          var xRandom = Math.random() * (_sectionWidth - 20);
          var yRandom = Math.random() * (_sectionHeight - 20);

          if(getRandomSizeValue(context) == NSOnState){
            var randomValue = Math.random() * 0.5 + 0.75;

            log("🐰" + randomValue + "🐰");
            
            var widthRandom = randomValue * width;
            var heightRandom = randomValue * height;
          } else {
            // checkbox "make shapes of random size" is checked
            var widthRandom = width;
            var heightRandom = height;
          }

          frame2.setWidth(Math.floor(widthRandom))
          frame2.setHeight(Math.floor(heightRandom))


          var newFrame2X = xPos + xRandom;
          var newFrame2Y = yPos + yRandom;


          frame2.setX(newFrame2X)
          frame2.setY(newFrame2Y)



          if(getOpacityValue(context) == NSOnState){
            // Generate random opacity between 70 and 100
            var randOpacityVal = Math.floor(Math.random()*(100-70+1)+70)/100;
            log('random opacity: ' + randOpacityVal);

            clone.style().contextSettings().setOpacity(randOpacityVal);

          }

          if(getRotationValue(context) == NSOnState){
            [clone setRotation:Math.floor(Math.random() * 360)];
          }

      }
  }

  for (var i = 0; i < selectionCount; i++) {
      selection[i].removeFromParent()
  }

  // Confirm that plugin is done with it's job
  doc.showMessage("Tadaa! Your confetti has been created 🎉");
}

function getHorizontalValue(context){
  // Gets and returns saved setting
  // If there is no saved setting, return default

  var horizontalValue = userDefaults.objectForKey("horizontalInput");

  log("Horizontal Value: ");

  if(horizontalValue != undefined){
    log(horizontalValue);
    return horizontalValue

  } else {
    log("no value");
    return "4" // Default value
  }

}

function getVerticalValue(context){
  // Gets and returns saved setting
  // If there is no saved setting, return default

  var verticalValue = userDefaults.objectForKey("verticalInput");

  log("Horizontal Value: ");

  if(verticalValue != undefined){
    log(verticalValue);
    return verticalValue

  } else {
    log("no value");
    return "3" // Default value
  }

}

function getOpacityValue(context){
  // Gets and returns saved setting
  // If there is no saved setting, return default

  var opacityInput = userDefaults.objectForKey("opacityInput");

  var state = NSOffState; // default

  if(opacityInput != undefined){


    if(opacityInput == 0){
      log("Opacity Input is 0");
      state = NSOffState;
    }

    if(opacityInput == 1){
      log("Opacity input is 1");
      state = NSOnState;
    }

  }


  return state;

}

function getRotationValue(context){
  // Gets and returns saved setting
  // If there is no saved setting, return default

  var rotationValue = userDefaults.objectForKey("rotationInput");

  var state = NSOffState; // default

  if(rotationValue != undefined){


    if(rotationValue == 0){
      state = NSOffState;
    }

    if(rotationValue == 1){
      state = NSOnState;
    }

  }

  log('🦊 rotationValue: ' + rotationValue);
  return state;

}

function getRandomSizeValue(context){
  // Gets and returns saved setting
  // If there is no saved setting, return default

  var randomSizeValue = userDefaults.objectForKey("randomSizeInput");

  var state = NSOffState; // default

  if(randomSizeValue != undefined){

    if(randomSizeValue == 0){
      state = NSOffState;
    }

  if(randomSizeValue == 1){
      state = NSOnState;
    }

  }

  return state;

}

function rerunWithCurrentSettings(context){
  // Generate confetti with custom settings
  // Or default settings when custom settings have never been set

  log("❤️ Run with current settings ❤️");


  var _artboard = getArtboard(context);
  var _artboardWidth = _artboard.frame().width();
  var _artboardHeight = _artboard.frame().height();

  var _horizontal = getHorizontalValue(context);
  var _vertical = getVerticalValue(context);

  var _sectionWidth = _artboardWidth / _horizontal;
  var _sectionHeight = _artboardHeight / _vertical;

  generateConfetti(context,_horizontal,_vertical,_sectionWidth,_sectionHeight);

}

function settings(context){
  // Display settings window

  // Create and show dialog window

  var window = createRectangleWindow(context);
  var alert = window[0];

  var response = alert.runModal()

  if(response == "1000"){
    // This code only runs when the user clicks 'Save and run';
    log("🐻 Save and run")

    // Save user input to user preferences
    saveDialogState(context);

    // Generate confetti
    rerunWithCurrentSettings(context);

    return true;

  } else

    if(response == "1001"){
      // This code only runs when the user clicks 'save';
      log("🐰 Save")

      // Save user input to user preferences
      saveDialogState(context);

      return true;

    }

  {
    return false;
  }



}
