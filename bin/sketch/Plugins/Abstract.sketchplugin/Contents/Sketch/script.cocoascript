function loadFramework(frameworkPath, frameworkName) {
  var frameworkFullPath = [frameworkPath stringByAppendingPathComponent:[NSString stringWithFormat:@"%@.framework", frameworkName]];
  return [[NSBundle bundleWithPath:frameworkFullPath] load];
}

function loadAllFrameworks(frameworkDirectory) {
  if (NSClassFromString("PROSketchBootstrap") == null) {
    var loadedFramework = loadFramework(frameworkDirectory, "ObjectiveGit");
    loadedFramework = loadedFramework && loadFramework(frameworkDirectory, "AbstractSDK");
    loadedFramework = loadedFramework && loadFramework(frameworkDirectory, "AbstractSketchPlugin");
    return loadedFramework;
  }
  return true;
}

function alert(message) {
  var app = [NSApplication sharedApplication];
  [app displayDialog:message];
}

function runFrameworkCode(context, callback) {
  var path = context.scriptPath;
  var frameworkDirectory = [path stringByDeletingLastPathComponent];
  if (loadAllFrameworks(frameworkDirectory)) {
    callback(context.document);
  } else {
    alert("Could not load Abstract :(");
  }
}

function startAbstract(context) {
  runFrameworkCode(context, function() {
    [PROSketchBootstrap startup];
  });
}

function loadAbstract(context) {
  runFrameworkCode(context, function(doc) {
    [PROSketchBootstrap loadBeltForDocument:doc];
  });
}

var toggleAbstract = function(context) {
  runFrameworkCode(context, function(doc) {
    [PROSketchBootstrap toggleOverlayForDocument:doc];
  });
}

var previewAndCommit = function(context) {
  runFrameworkCode(context, function(doc) {
    [PROSketchBootstrap previewAndCommit:doc];
  });
}
